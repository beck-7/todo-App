{"version":3,"sources":["reducer/index.ts","context/index.tsx","components/TodoForm.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["reducer","state","action","type","id","title","completed","map","todo","filter","TodoContext","createContext","ContextProvider","children","useReducer","JSON","parse","localStorage","getItem","dispatch","useEffect","setItem","stringify","value","todos","addTodo","trim","nanoid","toggleTodo","removeTodo","clearTodos","Provider","TodoForm","useState","content","setContent","useContext","uncompletedTodos","some","completedTodos","todoCounter","length","className","onSubmit","e","preventDefault","onChange","target","onClick","TodoItem","spanClass","clsx","checked","TodoList","App","render","document","querySelector"],"mappings":"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","file":"static/js/main.f6b89dfd.chunk.js","sourcesContent":["export const reducer = (state: State, action: Actions) => {\n  switch (action.type) {\n    case 'add': {\n      return [\n        ...state,\n        {\n          id: action.id,\n          title: action.title,\n          completed: false,\n        },\n      ]\n    }\n\n    case 'toggle': {\n      return state.map((todo) =>\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n      )\n    }\n\n    case 'remove': {\n      return state.filter((todo) => todo.id !== action.id)\n    }\n\n    case 'clear': {\n      return state.filter((todo) => !todo.completed)\n    }\n\n    default:\n      return state\n  }\n}\n","import React, { useReducer, useEffect, createContext } from 'react'\n\nimport { reducer } from '../reducer'\n\nimport { nanoid } from 'nanoid'\n\ninterface StateProps {\n  children: React.ReactNode\n}\n\ninterface ContextProps {\n  state: State\n  dispatch: React.Dispatch<Actions>\n  todos: Todo[]\n  addTodo: (text: string) => void\n  toggleTodo: (id: string) => void\n  removeTodo: (id: string) => void\n  clearTodos: () => void\n}\n\nexport const TodoContext = createContext({} as ContextProps)\n\nexport const ContextProvider = ({ children }: StateProps) => {\n  const [state, dispatch] = useReducer(reducer, JSON.parse(localStorage.getItem('todos') || '[]'))\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(state))\n  }, [state])\n\n  const addTodo = (title: string) => {\n    if (title.trim()) {\n      dispatch({\n        type: 'add',\n        id: nanoid(),\n        title,\n      })\n    }\n  }\n\n  const toggleTodo = (id: string) => {\n    dispatch({\n      type: 'toggle',\n      id,\n    })\n  }\n\n  const removeTodo = (id: string) => {\n    dispatch({\n      type: 'remove',\n      id,\n    })\n  }\n\n  const clearTodos = () =>\n    dispatch({\n      type: 'clear',\n    })\n\n  const value = {\n    state,\n    dispatch,\n    todos: state,\n    addTodo,\n    toggleTodo,\n    removeTodo,\n    clearTodos,\n  }\n\n  return <TodoContext.Provider value={value}>{children}</TodoContext.Provider>\n}\n","import React, { useState, useContext } from 'react'\n\nimport { TodoContext } from '../context'\n\ntype changeEvent = React.ChangeEvent<HTMLInputElement>\ntype formEvent = React.FormEvent<HTMLFormElement>\n\nexport const TodoForm = () => {\n  const [content, setContent] = useState('')\n  const { todos, addTodo, clearTodos } = useContext(TodoContext)\n\n  const changeHandler = (e: changeEvent) => {\n    setContent(e.target.value)\n  }\n\n  const submitHandler = (e: formEvent) => {\n    e.preventDefault()\n    addTodo(content)\n    setContent('')\n  }\n\n  const uncompletedTodos = todos.some((todo) => !todo.completed)\n  const completedTodos = todos.some((todo) => todo.completed)\n  const todoCounter = todos && todos.filter((todo) => !todo.completed).length\n\n  return (\n    <div className=\"container\">\n      <h1>Todo App</h1>\n      <div className=\"input-field\">\n        <form onSubmit={submitHandler}>\n          <label className=\"active\">Todo name</label>\n          <input type=\"text\" value={content} onChange={changeHandler} />\n        </form>\n      </div>\n      {completedTodos && (\n        <button className=\"waves-effect waves-light btn\" onClick={clearTodos}>\n          Clear Completed Todos\n        </button>\n      )}\n      {uncompletedTodos && (\n        <span className=\"indigo-text todo-counter\">{todoCounter} left to do</span>\n      )}\n    </div>\n  )\n}\n","import React, { useContext } from 'react'\n\nimport { TodoContext } from '../context'\n\nimport clsx from 'clsx'\n\ninterface ItemProps {\n  todo: Todo\n}\n\nexport const TodoItem = ({ todo }: ItemProps) => {\n  const { removeTodo, toggleTodo } = useContext(TodoContext)\n\n  const clickHandler = () => {\n    toggleTodo(todo.id)\n  }\n\n  const removeHandler = () => {\n    removeTodo(todo.id)\n  }\n\n  const spanClass = clsx('black-text', { completed: todo.completed })\n\n  return (\n    <div className=\"todo\">\n      <label>\n        <input type=\"checkbox\" checked={todo.completed} onChange={clickHandler} />\n        <span className={spanClass}>{todo.title}</span>\n        <button type=\"button\" onClick={removeHandler}>\n          <i className=\"material-icons red-text\">delete</i>\n        </button>\n      </label>\n    </div>\n  )\n}\n","import React, { useContext } from 'react'\n\nimport { TodoItem } from './TodoItem'\nimport { TodoContext } from '../context'\n\nexport const TodoList = () => {\n  const { todos } = useContext(TodoContext)\n\n  return (\n    <div className=\"container\">\n      <ul>\n        {todos.map((todo) => (\n          <li key={todo.id}>\n            <TodoItem todo={todo} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n","import React from 'react'\nimport { ContextProvider } from './context'\nimport { TodoForm } from './components/TodoForm'\nimport { TodoList } from './components/TodoList'\n\nexport const App: React.FC = () => {\n  return (\n    <ContextProvider>\n      <TodoForm />\n      <TodoList />\n    </ContextProvider>\n  )\n}\n","import React, { StrictMode } from 'react'\nimport { render } from 'react-dom'\nimport './index.css'\nimport { App } from './App'\n\nrender(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.querySelector('#root')\n)\n"],"sourceRoot":""}